import{_ as e,o as a,c as s,b as n,d as o,t as l,e as i}from"./app.66773060.js";const F=JSON.parse('{"title":"attachToEntity()","description":"","frontmatter":{"title":"attachToEntity()","order":0},"headers":[{"level":2,"title":"Function Definition","slug":"function-definition","link":"#function-definition","children":[{"level":3,"title":"Arguments","slug":"arguments","link":"#arguments","children":[]},{"level":3,"title":"Returns","slug":"returns","link":"#returns","children":[]}]},{"level":2,"title":"Documentation","slug":"documentation","link":"#documentation","children":[]}],"relativePath":"client/object/attachToEntity.md"}'),r={name:"client/object/attachToEntity.md"},c={id:"frontmatter-title",tabindex:"-1"},p=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=i(`<h2 id="function-definition" tabindex="-1">Function Definition <a class="header-anchor" href="#function-definition" aria-hidden="true">#</a></h2><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#A6ACCD;">public </span><span style="color:#82AAFF;">attachToEntity</span><span style="color:#A6ACCD;">(entity: Entity</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bone: number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos: shared</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Vector3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rot: shared</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Vector3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useSoftPinning</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> collision</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fixedRot</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> boolean): </span><span style="color:#89DDFF;">void;</span></span>
<span class="line"></span></code></pre></div><h3 id="arguments" tabindex="-1">Arguments <a class="header-anchor" href="#arguments" aria-hidden="true">#</a></h3><ul><li>entity: Entity</li><li>bone: number</li><li>pos: shared.Vector3</li><li>rot: shared.Vector3</li><li>useSoftPinning?: boolean</li><li>collision?: boolean</li><li>fixedRot?: boolean</li></ul><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h3><ul><li>void</li></ul><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-hidden="true">#</a></h2>`,7);function u(t,h,D,y,A,f){return a(),s("div",null,[n("h1",c,[o(l(t.$frontmatter.title)+" ",1),p]),d])}const _=e(r,[["render",u]]);export{F as __pageData,_ as default};
